/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

#include <dt-bindings/zmk/kscan_mock.h>
#include <dt-bindings/zmk/dynamic_macro.h>

#define COLEMK_L 0
#define GAMING_L 1
#define COLEMK_SIMPLE_L 2
#define QWERTY_L 3
#define DVORAK_L 4
#define SHIFT_L  5
#define LOWER    6
#define RAISE    7
#define CODE     8
#define CODE_FLIP 9
#define MOUSE    10
#define ADJ_L    11

#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)
#define Redo   LC(Y)

#define U_MOUSE_MOVE_MAX 1600                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)


#define U_MOUSE_MOVE_SLOW_MAX 500                     /* <--- New max speed setting (default: 600) */
#define MOVE_UP_SLOW MOVE_Y(-U_MOUSE_MOVE_SLOW_MAX)
#define MOVE_DOWN_SLOW MOVE_Y(U_MOUSE_MOVE_SLOW_MAX)
#define MOVE_LEFT_SLOW MOVE_X(-U_MOUSE_MOVE_SLOW_MAX)
#define MOVE_RIGHT_SLOW MOVE_X(U_MOUSE_MOVE_SLOW_MAX)

#define U_MOUSE_SCRL_MAX 15                    /* <--- New max speed setting (default: 10) */
#undef SCRL_UP
#undef SCRL_DOWN
#undef SCRL_LEFT
#undef SCRL_RIGHT
#define SCRL_UP MOVE_Y(U_MOUSE_SCRL_MAX)
#define SCRL_DOWN MOVE_Y(-U_MOUSE_SCRL_MAX)
#define SCRL_LEFT MOVE_X(-U_MOUSE_SCRL_MAX)
#define SCRL_RIGHT MOVE_X(U_MOUSE_SCRL_MAX)

&msc {
  time-to-max-speed-ms = <1>;                 /* <--- How long time until max speed is reached (default: 300) */
};

&caps_word {
        continue-list = <UNDERSCORE MINUS BSPC LS(BSPC)>;
};
&mmv {
	time-to-max-speed-ms = <300>;             /* <--- How long time until max speed is reached (default: 300) */
};

/ {
        behaviors {
        hl: homerow_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            };
        hls: homerow_layer_slow {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            };
        mpcaps: mod_preferred_caps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&caps_word>;
            };
        mp: mod_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            };
        mlt: my_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
/* COLEMAK-DH
 */
                        bindings = <
&kp  ESC      &kp  Q        &kp  W        &kp  F        &kp  P        &kp  B                                                                         &kp  J        &kp  L        &kp  U        &kp  Y        &kp  SQT     &kp  BSPC
&kp  TAB      &kp       A   &hls CODE  R  &hm LSHIFT S  &hm  LCTRL T  &hm LALT G                                                                     &hm RALT M    &hm RCTRL N   &hm RSHIFT  E &hls CODE_FLIP I   &kp      O   &kp  ENTER
&kp  DEL      &kp  Z        &kp  X        &kp  C        &kp  D        &kp  V      &mp LSHIFT Paste                                    &mpcaps RGUI 0 &kp  K        &kp  H        &kp  COMMA    &kp  DOT      &kp  SLASH    &kp  UP
&kp  LCTRL    &kp  C_MUTE   &kp C_PLAY_PAUSE            &kp Y &mlt MOUSE UNDERSCORE &hm LGUI SPACE &mlt LOWER Copy &mlt RAISE Copy  &mlt SHIFT_L SPACE &mlt CODE MINUS &hm RCTRL EQUAL      &kp  LEFT     &kp  DOWN     &kp  RIGHT
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                gaming_layer {
/* GAMING
 */
                        bindings = <
&kp  ESC      &kp N1        &kp  N2       &kp  N3       &kp  N4       &kp  N5                                                                        &kp  Y        &kp  C_BRI_DN        &kp  C_VOL_DN        &kp  C_VOL_UP        &kp  C_BRI_UP        &kp  BSPC
&kp  TAB      &kp       A   &kp  W        &kp  S        &kp  D        &kp  F                                                                         &kp  H        &kp  LEFT     &kp  UP       &kp  DOWN     &kp RIGHT     &kp  ENTER
&kp  T        &kp  Z        &kp  X        &kp  C        &kp  V        &kp  B  &kp  R                                                   &kp RSHFT    &kp  N        &kp  M        &kp  COMMA    &kp  DOT      &kp  UP       &kp  RCTRL
&kp  LCTRL    &kp  C_MUTE   &kp C_PLAY_PAUSE            &kp Q       &kp E &kp SPACE &kp LSHFT                        &mlt RAISE ESC  &mo LOWER &mo COLEMK_SIMPLE_L &mo QWERTY_L                &kp  LEFT     &kp  DOWN     &kp  RIGHT
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                colemak_simple_layer {
/* COLEMAK-SIMPLE (no home row mods an fewer multi-purpose keys. useful for some games)
 */
                        bindings = <
&kp  ESC      &kp  Q        &kp  W        &kp  F        &kp  P        &kp  B                                                                         &kp  J        &kp  L        &kp  U        &kp  Y        &kp  SQT     &kp  BSPC
&kp  TAB      &kp       A   &kp       R   &kp        S  &kp        T  &kp      G                                                                     &kp      M    &kp       N   &kp         E &kp            I   &kp      O   &kp  ENTER
&kp  LSHFT    &kp  Z        &kp  X        &kp  C        &kp  D        &kp  V      &mp LSHIFT Paste                                    &mpcaps RGUI 0 &kp  K        &kp  H        &kp  COMMA    &kp  DOT      &kp  SLASH    &kp  UP
&kp  LCTRL    &kp  C_MUTE   &kp C_PLAY_PAUSE            &kp Y &mlt MOUSE UNDERSCORE  &kp      SPACE &mlt LOWER Copy &mlt RAISE Copy  &kp LSHIFT         &mlt CODE MINUS &kp RCTRL           &kp  LEFT     &kp  DOWN     &kp  RIGHT
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                qwerty_layer {
/* QWERTY
 */
                        bindings = <
&kp  GRAVE    &kp  Q        &kp  W        &kp  E        &kp  R        &kp  T                                                                         &kp  Y        &kp  U        &kp  I        &kp  O        &kp  P        &kp  BSPC
&kp  TAB      &kp       A   &kp  S        &kp  D        &kp  F        &kp  G                                                                         &kp  H        &kp  J        &kp  K        &kp  L        &kp      SEMI &kp  ENTER
&kp  LSHFT    &kp  Z        &kp  X        &kp  C        &kp  V        &kp  B        &kp  DOT                                           &kp  SLASH    &kp  N        &kp  M        &kp  COMMA    &kp  DOT      &kp  UP       &kp  RCTRL
&kp  LCTRL    &kp  C_MUTE                 &kp C_PLAY_PAUSE &kp  LGUI  &mo MOUSE    &kp  SPACE    &mo  LOWER            &lt RAISE Copy  &sk  LSHIFT   &mo CODE     &kp  RGUI                   &kp  LEFT     &kp  DOWN     &kp  RIGHT
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                dvorak_layer {
/* DVORAK
 */
                        bindings = <
&kp  GRAVE    &kp  SQT      &kp  COMMA    &kp  DOT      &kp  P        &kp  Y                                                                         &kp  F        &kp  G        &kp  C        &kp  R        &kp  L        &kp  BSPC
&kp  TAB      &kp  A        &kp  O        &kp  E        &kp  U        &kp  I                                                                         &kp  D        &kp  H        &kp  T        &kp  N        &kp  S        &kp  ENTER
&kp  LSHFT    &kp  SEMI     &kp  Q        &kp  J        &kp  K        &kp  X        &kp  Z                                             &kp  SLASH    &kp  B        &kp  M        &kp  W        &kp  V        &kp  UP       &kp  RCTRL
&kp  LCTRL    &kp  C_MUTE                 &kp C_PLAY_PAUSE &kp  LGUI  &mo MOUSE    &kp  SPACE    &mo  LOWER            &lt RAISE Copy  &sk  LSHIFT   &mo CODE     &kp  RGUI                   &kp  LEFT     &kp  DOWN     &kp  RIGHT
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                shift_layer {
/* SHIFT_L
 */
                        bindings = <
&kp  LS(ESC) &kp  LS(Q)    &kp  LS(W)    &kp  LS(F)    &kp  LS(P)    &kp  LS(B)                                                                     &kp  LS(J)    &kp  LS(L)    &kp  LS(U)    &kp  LS(Y)    &kp  DQT     &kp  LS(BSPC)
&kp  LS(TAB) &kp  LS(A)    &hls CODE LS(R) &kp LS(S)     &hm  LCTRL LS(T) &hm LALT LS(G)                                                                 &hm RALT LS(M) &hm RCTRL LS(N) &hm RSHIFT  LS(E) &hls CODE_FLIP LS(I) &kp LS(O)    &kp  LS(ENTER)
&kp  LS(DEL)  &kp  LS(Z)    &kp  LS(X)    &kp  LS(C)    &kp  LS(D)    &kp  LS(V)  &mp LSHIFT LS(Paste)                                &mp RGUI &caps_word &kp  LS(K)    &kp  LS(H)    &kp  LT       &kp  GT       &kp QUESTION &kp  LS(UP) 
&kp  LS(LCTRL) &kp  C_MUTE   &kp C_PLAY_PAUSE            &kp LS(Y)    &mlt MOUSE UNDERSCORE &hm LGUI LS(SPACE) &mlt LOWER LS(Copy) &mlt RAISE LS(Copy) &mp LSHIFT LS(SPACE) &mlt CODE MINUS &hm LS(RCTRL) EQUAL &kp LS(LEFT) &kp LS(DOWN) &kp LS(RIGHT)
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };


                lower_layer {
/* LOWER
 */
                        bindings = <
&kp  GRAVE    &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                                                                  &trans        &trans         &kp LBKT      &kp RBKT     &kp DQT      &kp BSPC
&trans        &kp       N1  &kp       N2  &kp        N3 &kp        N4 &kp      N5                                                                  &kp      N6   &kp       N7   &kp        N8 &kp      N9  &kp      N0  &trans
&kp COLON     &kp SEMI      &kp N7        &kp N8        &kp N9        &kp N0        &trans                                            &trans       &kp BSLH      &kp PLUS       &kp COMMA     &kp DOT      &kp SLASH    &kp SEMICOLON
&trans        &trans        &trans                      &mo ADJ_L     &kp UNDERSCORE &trans        &trans          &mo RAISE      &kp SPACE   &kp UNDERSCORE     &trans                   &trans       &trans       &trans
                        >;

                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                raise_layer {
/* RAISE
 */
                        bindings = <
&kp  TILDE    &kp DQT       &kp LBRC      &kp RBRC        &trans           &trans                                                         &trans         &trans         &kp  LBRC    &kp  RBRC     &kp  DQT      &kp BSPC
&caps_word    &kp      EXCL &kp       AT  &kp        HASH &kp       DOLLAR &kp      PERCENT                                               &kp      CARET &kp       AMPS &kp    ASTRK &kp           LPAR &kp      RPAR &trans
&kp COLON     &kp SEMI      &kp LT        &kp GT          &kp EQUAL        &trans        &trans                             &trans        &kp PIPE       &kp PLUS       &kp LT       &kp GT        &kp QUESTION  &kp SEMICOLON
&trans        &trans        &trans                        &trans           &kp MINUS        &trans   &mo ADJ_L  &trans  &trans        &kp MINUS   &trans                             &trans        &trans        &trans
                        >;

                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                code_layer {
/* CODE
 */
                        bindings = <
&kp  BSPC     &kp  F1       &kp  F2       &kp  F3       &kp  F4       &kp  F5                                                            &trans        &kp  C_BRI_DN &kp  C_VOL_DN &kp  C_VOL_UP &kp  C_BRI_UP &kp LC(BSPC)
&kp  ENTER    &kp  LGUI     &mo  CODE     &kp LSHIFT    &kp  LCTRL    &kp  LALT                                                          &kp   RALT    &kp  LEFT    &kp   UP      &kp   DOWN    &kp  RIGHT    &trans
&kp DEL       &kp   F6      &kp  F7      &kp   F8      &kp   F9      &kp  F10      &kp F11                                &kp F12      &kp  F13      &kp   HOME   &kp PG_UP     &kp   PG_DN   &kp   END     &kp  C_VOL_UP
&trans        &trans        &trans                      &trans        &mo MOUSE    &trans        &trans     &trans        &kp LSHIFT       &trans        &trans                     &trans        &trans        &kp  C_VOL_DN
                        >;

                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                code_flip_layer {
/* CODE_FLIP
 */
                        bindings = <
&kp  BSPC     &kp  C_BRI_DN &kp  C_VOL_DN   &kp  C_VOL_UP &kp  C_BRI_UP       &kp  F5                                                            &kp F5        &kp F4        &kp F3        &kp F2        &kp F1        &kp LC(BSPC)
&kp  ENTER    &kp  LEFT    &kp   UP      &kp   DOWN    &kp  RIGHT    &kp  LALT                                                          &kp   RALT    &kp RCTRL    &kp RSHIFT    &mo  CODE_FLIP &kp  RGUI     &trans
&trans       &kp   HOME   &kp PG_UP     &kp   PG_DN   &kp   END      &kp  F15      &kp F14                                &kp F11      &kp F10       &kp F9       &kp F8        &kp F7        &kp F6        &trans
&trans        &trans        &trans                      &trans        &trans        &trans        &trans     &trans        &trans        &mo MOUSE    &trans                     &trans        &trans        &trans
                        >;

                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                mouse_layer {
/* MOUSE
 */
                        bindings = <
&kp BSPC       &kp  C_BRI_DN &kp  C_VOL_DN   &kp  C_VOL_UP &kp  C_BRI_UP &trans                                                               &trans &mmv MOVE_LEFT_SLOW &mmv MOVE_UP_SLOW &mmv MOVE_DOWN_SLOW &mmv MOVE_RIGHT_SLOW &trans
&kb ENTER      &mkp RCLK &msc SCRL_UP &msc SCRL_DOWN &mkp LCLK &trans                                                                                &mkp LCLK &mmv MOVE_LEFT   &mmv MOVE_UP &mmv MOVE_DOWN     &mmv MOVE_RIGHT &trans
&kp DEL         &msc SCRL_LEFT &msc SCRL_UP &msc SCRL_DOWN  &msc SCRL_RIGHT &trans         &trans                                         &kp RALT      &trans             &msc SCRL_LEFT &msc SCRL_UP &msc SCRL_DOWN  &msc SCRL_RIGHT           &trans
&trans         &trans         &trans                      &trans        &trans        &trans        &trans                 &kp RCTRL        &kp RSHIFT  &mo MOUSE            &kp RCTRL                              &trans      &trans            &trans
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                adj_layer {
/* ADJUST
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |       | QWERTY| DVORAK| COLEMK|       |       |-----------------------------------|       |Prt Scr|       | EP_OFF| EP_ON |       |
 * |       | BT 0  | BT 1  | BT 2  | BT 3  | BT 4  |-----------------------------------|       |       |       |       |       |       |
 * | BOOTL | RESET |       |OUT_USB|OUT_BLE|       |BT CLR |-------------------|       |       |       |       |       |       | SHIFT |
 * ----------------|       |-------|       |       |       |       |---|       |       |       |       |-------| CTRL  |----------------
 */
                        bindings = <
&to COLEMK_L  &to  QWERTY_L &to  GAMING_L &to  COLEMK_L &to COLEMK_SIMPLE_L &none                                                                       &none             &kp PRINTSCREEN    &none         &ext_power EP_OFF  &ext_power EP_ON &none
&none         &bt  BT_SEL 0 &bt  BT_SEL 1 &bt  BT_SEL 2 &bt  BT_SEL 3 &bt  BT_SEL 4                                                                     &none             &out OUT_USB  &none            &none           &none            &none
&bootloader   &sys_reset    &none         &out OUT_USB  &out OUT_BLE  &none         &bt BT_CLR                                         &none            &none             &out OUT_BLE              &none            &none           &none            &trans
&dm DM_PLY 0  &dm DM_STP 0 &dm DM_REC 0                 &trans        &trans        &trans        &trans                 &trans        &trans           &trans            &trans                              &kp  RCTRL      &none            &none
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };
        };
};


